---
# Setup AWX tower tasks

- name: Setup AWX tower rabbitmq service
  service:
    name: rabbitmq-server
    state: started
    enabled: yes

- block:
    - name: Create AWX tower migrations
      command: >-
        scl {{ tower_awx_scl_args }}
        "GIT_PYTHON_REFRESH=quiet awx-manage makemigrations"
      register: tower_awx_makemigration_result
      changed_when: >-
        not tower_awx_makemigration_result.stdout
        is search("No changes detected")
      become: yes
      become_user: awx
      become_method: "{{ tower_become_method }}"
      notify: tower restart

    - name: Migrate AWX tower
      command: >-
        scl {{ tower_awx_scl_args }}
        "GIT_PYTHON_REFRESH=quiet awx-manage migrate"
      register: tower_awx_migrate_result
      changed_when: >-
        not tower_awx_migrate_result.stdout
        is search("No migrations to apply")
      become: yes
      become_user: awx
      become_method: "{{ tower_become_method }}"
      notify: tower restart

    - name: Create AWX tower admin user
      shell: >-
        echo "{{ script }}" | scl {{ tower_awx_scl_args }}
        "GIT_PYTHON_REFRESH=quiet awx-manage shell"
      register: tower_awx_create_admin_result
      failed_when:
        tower_awx_create_admin_result.rc != 0
        and not tower_awx_create_admin_result.stderr
            is search("Key .username.=.admin. already exists")
      changed_when: tower_awx_create_admin_result.rc == 0
      vars:
        script: >-
          from django.contrib.auth.models import User;
          User.objects.create_superuser('admin', 'root@localhost',
          '{{ tower_admin_password }}')
      notify: tower restart

    - name: Create AWX tower preload data
      shell: >-
        scl {{ tower_awx_scl_args }}
        "GIT_PYTHON_REFRESH=quiet awx-manage create_preload_data"
      register: tower_awx_create_preload_data_result
      changed_when: >-
        not tower_awx_create_preload_data_result.stdout
            is search("changed: False")
      become: yes
      become_user: awx
      become_method: "{{ tower_become_method }}"
      notify: tower restart

    - name: Create AWX tower instance
      shell: >-
        scl {{ tower_awx_scl_args }}
        "GIT_PYTHON_REFRESH=quiet awx-manage provision_instance
        --hostname=$(hostname)"
      register: tower_awx_create_instance_result
      changed_when: >-
        not tower_awx_create_instance_result.stdout
            is search("Instance already registered")
      become: yes
      become_user: awx
      become_method: "{{ tower_become_method }}"
      notify: tower restart

    - name: Register AWX tower queue in rabbitmq
      shell: >-
        scl {{ tower_awx_scl_args }}
        "GIT_PYTHON_REFRESH=quiet awx-manage register_queue --queuename=tower
        --hostnames=$(hostname)"
      register: tower_awx_enable_rabbitmq_queue_result
      changed_when: >-
        not tower_awx_enable_rabbitmq_queue_result.stdout
            is search("Instance Group already registered")
  vars:
    ansible_become: yes
    ansible_become_user: awx

- name: Setup AWX tower config file settings
  lineinfile:
    path: "{{ tower_settings_path }}"
    regexp: "{{ tower_setting_item }}"
    state: absent
  loop:
    - CUSTOM_VENV_PATHS
    - AWX_TASK_ENV
  loop_control:
    loop_var: tower_setting_item
  notify: tower restart
