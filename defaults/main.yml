---
# Role default lower priority variables

# Tower version. If not defined the role will take the last version available in
# official repository

#tower_version:

# Type of tower product. Can be rh (Red Hat Tower) or awx (The FLOSS version of
# tower)

tower_type: awx

# Tower state. Can be present or absent

tower_state: present

# Admin password. Only used during install

tower_admin_password: password

# Port numbers

tower_host_port: 8080
tower_host_port_ssl: 8443

# Postgresql settings

tower_pg_hostname: ""
tower_pg_port: ""
tower_pg_database: tower
tower_pg_username: tower
tower_pg_password: tower

# Host url to use for config items management

tower_host: "http://localhost:{{ tower_host_port }}"

# Username/password and token to use for config items management.
#
# If token is not defined the role will generate one using username/password and
# then store it into a local fact in the server to allow reutilization.
#
# If tower_token_remove is set to yes the local fact storing token will be
# removed
#
# If tower_token_cleanup is set to yes all tokens will deleted from server

tower_username: admin
tower_password: "{{ tower_admin_password }}"
#tower_token:
tower_token_remove: no
tower_token_cleanup: no

# Verify or not SSL certs

tower_validate_certs: no

# Dictionary with the tower license info

#tower_license:

# Install tower software

tower_install: yes

# Force install even if the role detects that it is not necessary

tower_force_install: no

# List of strings with install extra arguments

tower_install_extra_args: []

# Configure tower assets

tower_configure: yes

# Ignore errors during tower assets configuration

tower_ignore_errors: no

# List of dicts with the settings to setup. Each dict can contain the following
# attributes with the same meaning that in ansible `tower_settings` module:
#
# - name
#   value
#
# Additionally you can pass the key `update` with a boolean value to indicate if
# the setting should be updated or not (default is true). This is useful to
# manage idempotence in options like passwords

tower_settings: []

# Indicate `tower_settings` must be loaded also from host variables. Any host
# variable that begins with "tower_settings_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_settings`

tower_settings_load_from_hostvars: no

# List of dicts with the organizations to setup. Each dict can contain the
# following attributes with the same meaning that in ansible
# `tower_organization` module:
#
# - description
# - name
# - state
#
# Additionally, you can provide a list of dicts indicating the ansible galaxy
# credentials to setup into the organization:
#
# - galaxy_credentials:
#     - name: <galaxy_credential_name>
#       state: <present_absent>

tower_organizations: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_orga√ß` variable. The members of the dict are the same attributes
# that the ones expected by the ansible `tower_organization` module

tower_organizations_defaults: {}

# Indicate `tower_organizations` must be loaded also from host variables. Any
# host variable that begins with "tower_organizations_*" and contains the
# necessary attributes will be loaded as an item to manage by the role. The
# variables must follow the structure detailed before for `tower_organizations`

tower_organizations_load_from_hostvars: no

# List of dicts with the teams to setup. Each dict can contain the following
# attributes with the same meaning that in ansible `tower_team` module:
#
# - name
# - organization
# - state

tower_teams: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_teams` variable. The members of the dict are the same attributes
# that the ones expected by the ansible `tower_team` module

tower_teams_defaults: {}

# Indicate `tower_teams` must be loaded also from host variables. Any host
# variable that begins with "tower_teams_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_teams`

tower_teams_load_from_hostvars: no

# List of dicts with the users to setup. Each dict can contain the following
# attributes with the same meaning that in ansible `tower_user` module:
#
# - auditor
# - email
# - first_name
# - last_name
# - password
# - state
# - superuser
# - username
#
# Additionally the following attributes can be used:
#
# - force_update: <yes|no>     # Force update. Needed if passwords were changed

tower_users: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_users` variable. The members of the dict are the same attributes
# that the ones expected by the ansible `tower_user` module

tower_users_defaults: {}

# Indicate `tower_users` must be loaded also from host variables. Any host
# variable that begins with "tower_users_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_users`

tower_users_load_from_hostvars: no

# List of dicts with the credentials to setup. Each dict can contain the
# following attributes with the same meaning that in ansible `tower_credential`
# module:
#
# - authorize
# - authorize_password
# - become_method
# - become_password
# - become_username
# - client
# - description
# - domain
# - host
# - kind
# - name
# - organization
# - password
# - project
# - secret
# - security_token
# - ssh_key_data
# - ssh_key_unlock
# - state
# - subscription
# - team
# - tenant
# - user
# - username
# - vault_password
#
# Additionally the following attributes can be used:
#
# - force_update: <yes|no>     # Force update. Needed if passwords were changed

tower_credentials: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_credentials` variable. The members of the dict are the same
# attributes that the ones expected by the ansible `tower_credential` module:

tower_credentials_defaults: {}

# Indicate `tower_credentials` must be loaded also from host variables. Any host
# variable that begins with "tower_credentials_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_credentials`

tower_credentials_load_from_hostvars: no

# List of dicts with the projects to setup. Each dict can contain the following
# attributes with the same meaning that in ansible `tower_project` module:
#
# - description
# - local_path
# - name
# - organization
# - scm_branch
# - scm_clean
# - scm_credential
# - scm_delete_on_update
# - scm_type
# - scm_update_cache_timeout
# - scm_update_on_launch
# - scm_url
# - state

tower_projects: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_projects` variable. The members of the dict are the same
# attributes that the ones expected by the ansible `tower_project` module

tower_projects_defaults: {}

# Number of retries to get a success state after managing a project

tower_projects_get_status_retries: 10

# Number of seconds to wait between project state checks

tower_projects_get_status_delay: 10

# Indicate `tower_projects` must be loaded also from host variables. Any host
# variable that begins with "tower_projects_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_projects`

tower_projects_load_from_hostvars: no

# List of dicts with the inventories to setup. Each dict can contain the
# following attributes with the same meaning that in ansible `tower_inventory`
# module:
#
# - description
# - host_filter
# - kind
# - name
# - organization
# - state
# - variables
#
# Additionally you can specify the inventory sources to use as a list of dicts
# in the attribute `sources`. The members of each dict are the same attributes
# that the ones expected by the ansible `tower_inventory_source` module:
#
# - credential
# - description
# - group_by
# - instance_filters
# - inventory
# - name
# - overwrite
# - overwrite_vars
# - source
# - source_path
# - source_project
# - source_regions
# - source_script
# - source_vars
# - state
# - timeout
# - update_cache_timeout
# - update_on_launch

tower_inventories: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_inventories` variable. The members of the dict are the same
# attributes that the ones expected by the ansible `tower_inventory` module

tower_inventories_defaults: {}

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_inventories.sources` items. The members of the dict are the same
# attributes that the ones expected by the ansible `tower_inventory_source`
# module

tower_inventories_sources_defaults: {}

# Indicate `tower_inventories` must be loaded also from host variables. Any host
# variable that begins with "tower_inventories_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_inventories`

tower_inventories_load_from_hostvars: no

# List of dicts with the job templates to setup. Each dict can contain the
# following attributes with the same meaning that in ansible
# `tower_job_template` module:
#
# - ask_credential
# - ask_diff_mode
# - ask_extra_vars
# - ask_inventory
# - ask_job_type
# - ask_limit
# - ask_skip_tags
# - ask_tags
# - ask_verbosity
# - become_enabled
# - concurrent_jobs_enabled
# - description
# - extra_vars_path
# - fact_caching_enabled
# - force_handlers_enabled
# - forks
# - host_config_key
# - inventory
# - job_tags
# - job_type
# - limit
# - name
# - playbook
# - project
# - skip_tags
# - start_at_task
# - state
# - survey_enabled
# - verbosity
#
# Also, you can specify the following settings for project update (with the same
# meaning that in ansible `tower_project_update` module:
#
# - update_interval
# - update_timeout
# - update_wait
#
# Also, you can provide to the previous template dictionary the attribute
# `credentials` containing a list of dictionarires with the credentials to apply
# to the template. The structure of these dicts is the following:
#
# {
#   name: <name>            # Name of the credential
#   type: <string>          # Type of credential. See tower docs for details
#   state: <state>          # State of the credential. Can be present or absent
# }
#
# Also, you can provide to the previous template dictionary the attribute
# `schedules` containing a list of dictionarires with the schedules to apply to
# the template. The structure of these dicts is the following:
#
# {
#   name: <name>            # Name of the schedule
#   rrule: <ical>           # iCal recurrence rule fot the schedule
#   extra_data: <data>      # Extra data to run the schedule
#   enabled: <yes_no>       # Enable or not the schedule
#   state: <state>          # State of the shedule. Can be present or absent
# }
#
# Also, you can provide to the previous template dictionary the attribute
# `roles` containing a list of dictionarires with the roles to apply to the
# template. The structure of these dicts is the following:
#
# {
#   role: <role>            # Role to assign
#   team: <team>            # Team to apply the role
#   user: <user>            # User to apply the role
#   state: <state>          # State of the role. Can be present or absent
#                           # Default is present
# }

tower_templates: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_templates` variable. The members of the dict are the same
# attributes that the ones expected by the ansible `tower_inventory_source`
# module

tower_templates_defaults: {}

# Number of retries to get a success state after managing a template

tower_templates_get_status_retries: 5

# Number of seconds to wait between template state checks

tower_templates_get_status_delay: 10

# Indicate `tower_templates` must be loaded also from host variables. Any host
# variable that begins with "tower_templates_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_templates`

tower_templates_load_from_hostvars: no

# List of dicts with the job workflows to setup. Each dict can contain the
# following attributes with the same meaning that in ansible
# `tower_workflow_template` module:
#
# - ask_simultaneous
# - ask_variables_on_launch
# - ask_inventory_on_launch
# - description
# - extra_vars_path
# - inventory
# - name
# - organization
# - playbook
# - state
# - survey_enabled
#
# Also, you can provide to the previous workflow dictionary the attribute
# `schedules` containing a list of dictionarires with the schedules to apply to
# the workflow. The structure of these dicts is the following:
#
# {
#   name: <name>            # Name of the schedule
#   rrule: <ical>           # iCal recurrence rule fot the schedule
#   extra_data: <data>      # Extra data to run the schedule
#   enabled: <yes_no>       # Enable or not the schedule
#   state: <state>          # State of the shedule. Can be present or absent
# }
#
# Also, you can provide to the previous workflow dictionary the attribute
# `roles` containing a list of dictionarires with the roles to apply to the
# workflow. The structure of these dicts is the following:
#
# {
#   role: <role>            # Role to assign
#   team: <team>            # Team to apply the role
#   state: <state>          # State of the role. Can be present or absent
#                           # Default is present
# }
#
# Also, you can provide to the previous workflow dictionary the attribute
# `nodes` containing a list of dictionaries with the nodes to build the
# workflow. The structure of these dicts is the following (the attributes have
# the same meaning that tower_workflow_job_template_node ansible module):
#
# {
#   all_parents_must_converge: <value>
#   always_nodes: <value>
#   credentials: <value>
#   diff_mode: <value>
#   extra_data: <value>
#   failure_nodes: <value>
#   identifier: <value>
#   inventory: <value>
#   job_tags: <value>
#   job_type: <value>
#   limit: <value>
#   organization: <value>
#   scm_branch: <value>
#   skip_tags: <value>
#   state: <value>
#   success_nodes: <value>
#   unified_job_template: <value>
#   verbosity: <value>
#   workflow_job_template: <value>
# }

tower_workflows: []

# Dictionary with the defaults options to use if no other ones are specified in
# the `tower_workflows` variable. The members of the dict are the same
# attributes that the ones expected by the ansible `tower_inventory_source`
# module

tower_workflows_defaults: {}

# Number of retries to get a success state after managing a workflow

tower_workflows_get_status_retries: 5

# Number of seconds to wait between workflow state checks

tower_workflows_get_status_delay: 10

# Indicate `tower_workflows` must be loaded also from host variables. Any host
# variable that begins with "tower_workflows_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `tower_workflows`

tower_workflows_load_from_hostvars: no

# Indicate if workflows nodes must be configured.

tower_workflows_setup_nodes: yes

# Indicate wich items to setup for tower resources

tower_resources_setup_virtualenvs: yes
tower_resources_setup_surveys: yes
tower_resources_setup_credentials: yes
tower_resources_setup_galaxy_credentials: yes
tower_resources_setup_schedules: yes
tower_resources_setup_roles: yes

# Indicate a regular expression to select by name the resources to manage.
# This is useful if you want to reduce the number of resources to manage

tower_resources_name_regex: ".*"

# Indicate a regular expression to reject by name the resources to manage.
# This is useful if you want to exclude certain items

tower_resources_exclude_name_regex: "^$"

# Artifact download config. This is only used when variable `tower_type` is set
# to `rh`
#
# The role will try to identify the Tower artifact to download from the the
# official site.
#
# If you want to download the artifact from another repository yo need to
# configure the `tower_artifact` variable to point to a local/public repository
# that contains the required artifact
#
# Take a look to `amtega.artifact` role documentation to known about supported
# types of artifacts, their specific settings and how to configure a proxy if
# necessary. The attributes `id`, `unarchive` of the artifact will be overriden,
# so they are not mandatory

# tower_artifact:

# Hide sensitive information

tower_no_log: yes

# =============================================================================
# AWX settings.
#
# These settinges are only used when variable `tower_type` is set to `awx`
# =============================================================================

# AWX cecret key. It's *very* important that this stay the same between upgrades
# or you will lose the ability to decrypt your credentials

tower_secret_key: awxsecret

# Indicate if the role must skip packages related tasks, something that can be
# useful if you want to speed up things

tower_skip_packages: no

# Indicate if the role must skip selinux tasks, something that can be useful if
# you want to speed up things

tower_skip_selinux: "{{ tower_skip_packages }}"

# AWX PostgreSQL path.
#
# AWX requires access to a PostgreSQL database, and by default, one will be
# created and deployed in a container, and data will be persisted to a host
# volume. In this scenario, you must set the value of
# tower_awx_postgres_data_dir to a path that can be mounted to the container.
# When the container is stopped, the database files will still exist in the
# specified path.

tower_awx_postgres_data_dir: /var/lib/postgres-awx

#
# AWX repository options
#

tower_awx_repository: https://github.com/ansible/awx.git
tower_awx_repository_clone_dir: "/srv/awx"
tower_awx_repository_version: "{{ tower_version }}"
tower_awx_repository_keep_updated: yes
tower_awx_repository_clone_clean: yes

#
# AWX docker registry settings
#
# If you wish to tag and push built images to docker registry, set the following
# variables in the inventory file.

# IP address and port, or URL, for accessing a registry.

#tower_awx_docker_registry:

# Namespace to use when pushing and pulling images to and from the registry.

tower_awx_docker_registry_repository: awx

# Username of the user that will push images to the registry.

tower_awx_docker_registry_username: developer

# Retries and seconds to pause during install to give time to awx to start

tower_awx_install_retries: 10
tower_awx_install_pause: 30
